/* The following code was generated by JFlex 1.4.3 on 5/19/15 2:53 PM */

package com.intellij.whileLang;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.whileLang.psi.WhileTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 5/19/15 2:53 PM from the specification file
 * <tt>/home/me/IdeaProjects/whileLang-idea-plugin/src/com/intellij/whileLang/While.flex</tt>
 */
class WhileLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int WAITING_VALUE = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\1\1\0\1\3\1\2\22\0\1\3\1\4\1\0"+
    "\1\4\14\0\12\26\1\5\1\7\1\0\1\6\3\0\32\25\6\0"+
    "\1\24\2\25\1\21\1\14\1\11\1\25\1\13\1\10\2\25\1\16"+
    "\1\25\1\15\1\22\2\25\1\23\1\17\1\12\2\25\1\20\3\25"+
    "\57\0\1\25\12\0\1\25\4\0\1\25\5\0\27\25\1\0\37\25"+
    "\1\0\u01ca\25\4\0\14\25\16\0\5\25\7\0\1\25\1\0\1\25"+
    "\201\0\5\25\1\0\2\25\2\0\4\25\10\0\1\25\1\0\3\25"+
    "\1\0\1\25\1\0\24\25\1\0\123\25\1\0\213\25\10\0\236\25"+
    "\11\0\46\25\2\0\1\25\7\0\47\25\110\0\33\25\5\0\3\25"+
    "\55\0\53\25\43\0\2\25\1\0\143\25\1\0\1\25\17\0\2\25"+
    "\7\0\2\25\12\0\3\25\2\0\1\25\20\0\1\25\1\0\36\25"+
    "\35\0\131\25\13\0\1\25\30\0\41\25\11\0\2\25\4\0\1\25"+
    "\5\0\26\25\4\0\1\25\11\0\1\25\3\0\1\25\27\0\31\25"+
    "\253\0\66\25\3\0\1\25\22\0\1\25\7\0\12\25\17\0\7\25"+
    "\1\0\7\25\5\0\10\25\2\0\2\25\2\0\26\25\1\0\7\25"+
    "\1\0\1\25\3\0\4\25\3\0\1\25\20\0\1\25\15\0\2\25"+
    "\1\0\3\25\16\0\2\25\23\0\6\25\4\0\2\25\2\0\26\25"+
    "\1\0\7\25\1\0\2\25\1\0\2\25\1\0\2\25\37\0\4\25"+
    "\1\0\1\25\23\0\3\25\20\0\11\25\1\0\3\25\1\0\26\25"+
    "\1\0\7\25\1\0\2\25\1\0\5\25\3\0\1\25\22\0\1\25"+
    "\17\0\2\25\43\0\10\25\2\0\2\25\2\0\26\25\1\0\7\25"+
    "\1\0\2\25\1\0\5\25\3\0\1\25\36\0\2\25\1\0\3\25"+
    "\17\0\1\25\21\0\1\25\1\0\6\25\3\0\3\25\1\0\4\25"+
    "\3\0\2\25\1\0\1\25\1\0\2\25\3\0\2\25\3\0\3\25"+
    "\3\0\14\25\26\0\1\25\64\0\10\25\1\0\3\25\1\0\27\25"+
    "\1\0\12\25\1\0\5\25\3\0\1\25\32\0\2\25\6\0\2\25"+
    "\43\0\10\25\1\0\3\25\1\0\27\25\1\0\12\25\1\0\5\25"+
    "\3\0\1\25\40\0\1\25\1\0\2\25\17\0\2\25\22\0\10\25"+
    "\1\0\3\25\1\0\51\25\2\0\1\25\20\0\1\25\21\0\2\25"+
    "\30\0\6\25\5\0\22\25\3\0\30\25\1\0\11\25\1\0\1\25"+
    "\2\0\7\25\72\0\60\25\1\0\2\25\14\0\7\25\72\0\2\25"+
    "\1\0\1\25\2\0\2\25\1\0\1\25\2\0\1\25\6\0\4\25"+
    "\1\0\7\25\1\0\3\25\1\0\1\25\1\0\1\25\2\0\2\25"+
    "\1\0\4\25\1\0\2\25\11\0\1\25\2\0\5\25\1\0\1\25"+
    "\25\0\2\25\42\0\1\25\77\0\10\25\1\0\44\25\33\0\5\25"+
    "\163\0\53\25\24\0\1\25\20\0\6\25\4\0\4\25\3\0\1\25"+
    "\3\0\2\25\7\0\3\25\4\0\15\25\14\0\1\25\21\0\46\25"+
    "\12\0\53\25\1\0\1\25\3\0\u0149\25\1\0\4\25\2\0\7\25"+
    "\1\0\1\25\1\0\4\25\2\0\51\25\1\0\4\25\2\0\41\25"+
    "\1\0\4\25\2\0\7\25\1\0\1\25\1\0\4\25\2\0\17\25"+
    "\1\0\71\25\1\0\4\25\2\0\103\25\45\0\20\25\20\0\125\25"+
    "\14\0\u026c\25\2\0\21\25\1\0\32\25\5\0\113\25\25\0\15\25"+
    "\1\0\4\25\16\0\22\25\16\0\22\25\16\0\15\25\1\0\3\25"+
    "\17\0\64\25\43\0\1\25\4\0\1\25\103\0\130\25\10\0\51\25"+
    "\1\0\1\25\5\0\106\25\12\0\35\25\63\0\36\25\2\0\5\25"+
    "\13\0\54\25\25\0\7\25\70\0\27\25\11\0\65\25\122\0\1\25"+
    "\135\0\57\25\21\0\7\25\67\0\36\25\15\0\2\25\20\0\46\25"+
    "\32\0\44\25\51\0\3\25\12\0\44\25\153\0\4\25\1\0\4\25"+
    "\16\0\300\25\100\0\u0116\25\2\0\6\25\2\0\46\25\2\0\6\25"+
    "\2\0\10\25\1\0\1\25\1\0\1\25\1\0\1\25\1\0\37\25"+
    "\2\0\65\25\1\0\7\25\1\0\1\25\3\0\3\25\1\0\7\25"+
    "\3\0\4\25\2\0\6\25\4\0\15\25\5\0\3\25\1\0\7\25"+
    "\164\0\1\25\15\0\1\25\20\0\15\25\145\0\1\25\4\0\1\25"+
    "\2\0\12\25\1\0\1\25\3\0\5\25\6\0\1\25\1\0\1\25"+
    "\1\0\1\25\1\0\4\25\1\0\13\25\2\0\4\25\5\0\5\25"+
    "\4\0\1\25\64\0\2\25\u0a7b\0\57\25\1\0\57\25\1\0\205\25"+
    "\6\0\4\25\21\0\46\25\12\0\66\25\11\0\1\25\20\0\27\25"+
    "\11\0\7\25\1\0\7\25\1\0\7\25\1\0\7\25\1\0\7\25"+
    "\1\0\7\25\1\0\7\25\1\0\7\25\120\0\1\25\u01d5\0\2\25"+
    "\52\0\5\25\5\0\2\25\4\0\126\25\6\0\3\25\1\0\132\25"+
    "\1\0\4\25\5\0\51\25\3\0\136\25\21\0\33\25\65\0\20\25"+
    "\u0200\0\u19b6\25\112\0\u51cc\25\64\0\u048d\25\103\0\56\25\2\0\u010d\25"+
    "\3\0\20\25\12\0\2\25\24\0\57\25\20\0\31\25\10\0\106\25"+
    "\61\0\11\25\2\0\147\25\2\0\4\25\1\0\2\25\16\0\12\25"+
    "\120\0\10\25\1\0\3\25\1\0\4\25\1\0\27\25\35\0\64\25"+
    "\16\0\62\25\76\0\6\25\3\0\1\25\16\0\34\25\12\0\27\25"+
    "\31\0\35\25\7\0\57\25\34\0\1\25\60\0\51\25\27\0\3\25"+
    "\1\0\10\25\24\0\27\25\3\0\1\25\5\0\60\25\1\0\1\25"+
    "\3\0\2\25\2\0\5\25\2\0\1\25\1\0\1\25\30\0\3\25"+
    "\43\0\6\25\2\0\6\25\2\0\6\25\11\0\7\25\1\0\7\25"+
    "\221\0\43\25\35\0\u2ba4\25\14\0\27\25\4\0\61\25\u2104\0\u012e\25"+
    "\2\0\76\25\2\0\152\25\46\0\7\25\14\0\5\25\5\0\1\25"+
    "\1\0\12\25\1\0\15\25\1\0\5\25\1\0\1\25\1\0\2\25"+
    "\1\0\2\25\1\0\154\25\41\0\u016b\25\22\0\100\25\2\0\66\25"+
    "\50\0\14\25\164\0\5\25\1\0\207\25\44\0\32\25\6\0\32\25"+
    "\13\0\131\25\3\0\6\25\2\0\6\25\2\0\6\25\2\0\3\25"+
    "\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\1\1\5\11\6"+
    "\1\7\1\10\1\11\1\12\4\6\1\13\1\14\6\6"+
    "\1\15\1\16\2\6\1\17\1\20\1\21";

  private static int [] zzUnpackAction() {
    int [] result = new int[41];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\27\0\56\0\56\0\105\0\134\0\163\0\212"+
    "\0\56\0\241\0\270\0\317\0\346\0\375\0\u0114\0\u012b"+
    "\0\u0142\0\u0159\0\u0170\0\56\0\346\0\346\0\u0187\0\u019e"+
    "\0\u01b5\0\u01cc\0\346\0\346\0\u01e3\0\u01fa\0\u0211\0\u0228"+
    "\0\u023f\0\u0256\0\346\0\346\0\u026d\0\u0284\0\346\0\346"+
    "\0\346";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[41];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\3\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\3\15\1\17\1\20"+
    "\1\21\1\22\2\15\1\23\1\3\1\4\1\5\1\6"+
    "\23\3\30\0\1\4\30\0\1\6\23\0\1\7\2\0"+
    "\24\7\6\0\1\24\30\0\1\15\1\25\15\15\10\0"+
    "\1\26\16\15\10\0\3\15\1\27\13\15\10\0\17\15"+
    "\10\0\6\15\1\30\10\15\10\0\3\15\1\31\7\15"+
    "\1\32\3\15\10\0\12\15\1\33\4\15\10\0\11\15"+
    "\1\34\5\15\10\0\4\15\1\35\12\15\26\0\1\23"+
    "\10\0\4\15\1\36\12\15\10\0\7\15\1\37\7\15"+
    "\10\0\1\40\16\15\10\0\1\41\16\15\10\0\14\15"+
    "\1\42\2\15\10\0\5\15\1\43\11\15\10\0\4\15"+
    "\1\44\12\15\10\0\6\15\1\45\10\15\10\0\2\15"+
    "\1\46\14\15\10\0\11\15\1\47\5\15\10\0\4\15"+
    "\1\50\12\15\10\0\4\15\1\51\12\15";

  private static int [] zzUnpackTrans() {
    int [] result = new int[667];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\4\1\1\11\12\1\1\11\25\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[41];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  WhileLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1522) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 17: 
          { yybegin(YYINITIAL); return WhileTypes.WRITE;
          }
        case 18: break;
        case 3: 
          { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
          }
        case 19: break;
        case 10: 
          { yybegin(YYINITIAL); return WhileTypes.FI;
          }
        case 20: break;
        case 16: 
          { yybegin(YYINITIAL); return WhileTypes.WHILE;
          }
        case 21: break;
        case 13: 
          { yybegin(YYINITIAL); return WhileTypes.THEN;
          }
        case 22: break;
        case 6: 
          { yybegin(YYINITIAL); return WhileTypes.VARNAME;
          }
        case 23: break;
        case 2: 
          { yybegin(YYINITIAL); return WhileTypes.CRLF;
          }
        case 24: break;
        case 8: 
          { yybegin(YYINITIAL); return WhileTypes.ASSIGN;
          }
        case 25: break;
        case 5: 
          { yybegin(YYINITIAL); return WhileTypes.SEPARATOR;
          }
        case 26: break;
        case 7: 
          { yybegin(YYINITIAL); return WhileTypes.NUMBER;
          }
        case 27: break;
        case 14: 
          { yybegin(YYINITIAL); return WhileTypes.ELSE;
          }
        case 28: break;
        case 11: 
          { yybegin(YYINITIAL); return WhileTypes.DO;
          }
        case 29: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 30: break;
        case 4: 
          { yybegin(YYINITIAL); return WhileTypes.COMMENT;
          }
        case 31: break;
        case 15: 
          { yybegin(YYINITIAL); return WhileTypes.READ;
          }
        case 32: break;
        case 12: 
          { yybegin(YYINITIAL); return WhileTypes.OD;
          }
        case 33: break;
        case 9: 
          { yybegin(YYINITIAL); return WhileTypes.IF;
          }
        case 34: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
